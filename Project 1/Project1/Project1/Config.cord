// This is a Spec Explorer coordination script (Cord version 1.0) .
// Here you define configurations and machines describing the
// exploration task you want to perform.
using Project1.TestAdapter;

/// Contains actions of the model, bounds, and switches.
config Main 
{
    action abstract static void AdapterClass.InitializeTestAdapter();
    action abstract static void AdapterClass.AdapterSendReadRequest();
    action abstract static void AdapterClass.AdapterReceiveDataBlock();
    action abstract static void AdapterClass.AdapterSendACK();
    action abstract static bool AdapterClass.AdapterCanGetExit(int len);
    action abstract static void AdapterClass.AdapterSendWriteRequest();
    action abstract static void AdapterClass.AdapterSendDataBlock();
    action abstract static void AdapterClass.AdapterReceiveACK();
    action abstract static bool AdapterClass.AdapterCanPutExit(int len);

    switch StepBound = 128;
    switch PathDepthBound = 128;
    switch TestClassBase = "vs";
    switch GeneratedTestPath = "..\\Project1.TestSuite";
    switch ForExploration = false;
    switch TestEnabled = false;
}

config ParameterCombination : Main
{
    action abstract static bool AdapterClass.AdapterCanGetExit(int len) 
        where 
        {.
            Condition.In(len, 0, 16, 64, 128, 512, 516, 1024);
        .};

    action abstract static bool AdapterClass.AdapterCanPutExit(int len)
        where 
        {.
            Condition.In(len, 0, 16, 64, 128, 512, 516, 1024);
        .};
}

machine DefaultProgram() : Main where ForExploration = true     
{
    construct model program from ParameterCombination
    where scope = "Project1.ModelProgram"
}

// send data block
machine SendProgram() : Main where ForExploration = true
{
    InitializeTestAdapter; AdapterSendWriteRequest; AdapterReceiveACK; AdapterSendDataBlock; (AdapterReceiveACK; AdapterSendDataBlock; AdapterCanPutExit;)+     
}

// receive data block
machine ReceiveProgram() : Main where ForExploration = true
{
    InitializeTestAdapter; AdapterSendReadRequest; AdapterReceiveDataBlock; AdapterSendACK; (AdapterReceiveDataBlock; AdapterSendACK; AdapterCanGetExit;)+
}

machine SlicedSendProgram() : Main where ForExploration = true
{
    SendProgram || ModelProgram
}

machine SlicedReceiveProgram() : Main where ForExploration = true
{
    ReceiveProgram || ModelProgram
}   